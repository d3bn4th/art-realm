// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ARTIST
  BUYER
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      UserRole
  bio       String?
  location  String?
  image     String?
  specialties String[]
  artworks  Artwork[]
  orders    Order[]
  ratings   Rating[]
  bids      Bid[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Artwork {
  id           String   @id @default(cuid())
  title        String
  description  String
  price        Float
  category     String
  image        String
  materials    String[]
  isEcoFriendly Boolean @default(false)
  artist       User     @relation(fields: [artistId], references: [id])
  artistId     String
  orders       Order[]
  ratings      Rating[]
  auction      Auction?
  likes        Like[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Order {
  id                  String    @id @default(cuid())
  status              String    // pending, completed, shipping, cancelled
  totalAmount         Float
  shippingAddress     String?   // JSON string containing address details
  shippingMethod      String?
  trackingNumber      String?
  shippingDate        DateTime?
  expectedDeliveryDate DateTime?
  deliveryDate        DateTime?
  paymentMethod       String?
  paymentId           String?
  paymentStatus       String?
  paymentDate         DateTime?
  buyer               User      @relation(fields: [buyerId], references: [id])
  buyerId             String
  artwork             Artwork   @relation(fields: [artworkId], references: [id])
  artworkId           String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Rating {
  id        String   @id @default(cuid())
  value     Int      // Rating value (1-5)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  artwork   Artwork  @relation(fields: [artworkId], references: [id])
  artworkId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ensure a user can only rate an artwork once
  @@unique([userId, artworkId])
}

model Auction {
  id              String    @id @default(cuid())
  startTime       DateTime
  endTime         DateTime
  startingPrice   Float
  currentPrice    Float
  status          String    // active, ended, cancelled
  artwork         Artwork   @relation(fields: [artworkId], references: [id])
  artworkId       String    @unique  // One artwork can only be in one auction
  bids            Bid[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Bid {
  id          String   @id @default(cuid())
  amount      Float
  bidder      User     @relation(fields: [bidderId], references: [id])
  bidderId    String
  auction     Auction  @relation(fields: [auctionId], references: [id])
  auctionId   String
  createdAt   DateTime @default(now())
}

model Like {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  artwork     Artwork  @relation(fields: [artworkId], references: [id])
  artworkId   String
  createdAt   DateTime @default(now())

  // Ensure a user can only like an artwork once
  @@unique([userId, artworkId])
} 